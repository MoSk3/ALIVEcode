{
	"blocs": [
		"\\bsi\\b",
		"\\bsinon\\b",
		"\\balors\\b",
		"\\bpour\\b",
		"\\brepeter\\b",
		"\\.\\.\\.",
		"\\bbond\\b",
		"\\bdans\\b",
		"\\btant que\\b",
		"\\bfaire\\b"
	],
	"datatype": {
		"nul": "\\bnul\\b",
		"entier": "\\d+",
		"texte": "\".*?\"|'.*?'",
		"decimal": "\\d+\\.\\d+|\\d+\\.(?!\\.)|(?<!\\.)\\.\\d+",
		"booleen": "\\bvrai\\b|\\bfaux\\b"
	},
	"logiques": ["\\bet\\b", "\\bou\\b", "\\bpas\\b"],
	"operators": [
		"\\+",
		"\\^",
		"\\*",
		"-",
		"/",
		"//",
		"%",
		"[|]",
		"=",
		"<-",
		"\\+=",
		"\\^=",
		"\\*=",
		"-=",
		"/=",
		"//=",
		"[%]=",
		"\\|=",
		"->",
		"[:]",
		"(={2})|(==)",
		"!=",
		">",
		"<",
		">=",
		"<="
	],
	"fonctions": [
		"\\bfonction\\b",
		"\\bstructure\\b",
		"\\bget\\b",
		"\\bset\\b",
		"->"
	],
	"variable": "[a-zA-Z_¡-￿][a-zA-Z\\d_¡-￿]*",
	"datatypes_names": [
		"\\bentier\\b",
		"\\bdecimal\\b",
		"\\btexte\\b",
		"\\bbooleen\\b",
		"\\bliste\\b",
		"\\bfonctionType\\b",
		"\\bnulType\\b",
		"\\bnombre\\b",
		"\\biterable\\b",
		"\\btout\\b",
		"\\brien\\b"
	],
	"fin": "\\bfin\\b",
	"fonctions_builtin": [
		"\\baleatoire\\b",
		"\\btypeDe\\b",
		"\\bbooleen\\b",
		"\\bauto\\b",
		"\\binfo\\b",
		"\\bgetVar\\b",
		"\\bliste\\b",
		"\\binv\\b",
		"\\bmap\\b",
		"\\bfiltrer\\b",
		"\\bjoindre\\b",
		"\\bsomme\\b",
		"\\bmax\\b",
		"\\bmin\\b",
		"\\bunir\\b",
		"\\btailleDe\\b",
		"\\bindexDe\\b",
		"\\btexte\\b",
		"\\bmaj\\b",
		"\\bminus\\b",
		"\\bremplacer\\b",
		"\\bremplacerRe\\b",
		"\\bmatch\\b",
		"\\bestNumerique\\b",
		"\\bformat\\b",
		"\\bentier\\b",
		"\\bdecimal\\b",
		"\\bnombre\\b",
		"\\bbin\\b",
		"\\bbob\\b",
		"\\bfinl\\b",
		"\\bvarLocales\\b",
		"\\bvarGlobales\\b",
		"\\bvarListe\\b"
	],
	"control_flow": ["\\bsortir\\b", "\\bcontinuer\\b", "\\bretourner\\b"],
	"const": "\\bconst\\b",
	"modules": [
		"builtins",
		"Ast",
		"Math",
		"Voiture",
		"Dict",
		"Test",
		"Ai",
		"\\b\"experimental\"\\b"
	],
	"commands": [
		"\\blire\\b",
		"\\battendre\\b",
		"\\butiliser\\b",
		"\\bvar\\b",
		"\\bafficher\\b",
		"\\bavancer\\b",
		"\\breculer\\b",
		"\\barreter\\b",
		"\\bdroite\\b",
		"\\bgauche\\b"
	]
}